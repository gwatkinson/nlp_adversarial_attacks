# Packaging
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "nlp_attacks"
version = "0.1.0"
description = "NLP project on adversarial attacks for the NLP course at ENSAE"
authors = [
  "Gabriel Watkinson <gabriel.watkinson@ensae.fr>",
  "Baptiste Pasquier <baptiste.pasquier@ensae.fr>"
]
readme = "README.md"
license="MIT"
repository="https://github.com/gwatkinson/nlp_adversarial_attacks"
packages = [{include = "nlp_attacks", from = "src"}]

[tool.poetry.scripts]
get_data = 'src.nlp_attacks.download_data:main'


# Dependencies
[tool.poetry.dependencies]
python = "^3.8.1"
numpy = "^1.24.2"
pandas = "^1.5.3"
scikit-learn = "^1.2.1"
torch = "^1.13.1"
transformers = "^4.26.0"
sentencepiece = "^0.1.97"
textattack = "^0.3.8"
sentence-transformers = "^2.2.2"
matplotlib = "^3.6.3"
seaborn = "^0.12.2"
spacy = "^3.5.0"
gdown = "^4.6.0"
click = "<8.1.0"

[tool.poetry.group.dev.dependencies]
pip = "^23.0"
poethepoet = "^0.18.1"
pre-commit = "^3.0.4"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-sugar = "^0.9.6"
ipykernel = "^6.21.1"
ipywidgets = ">=7.0,<8.0"
jupyter = "^1.0.0"


# Tool configuration
[tool.isort]
profile = "black"

[tool.flake8]
ignore = ['E203', 'E501']
max-line-length = 88
count = true
docstring-convention = 'google'

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.poe.tasks]
init_dev = [
  { cmd = "poetry install --sync" },
  { cmd = "pre-commit install" },
]
torch_cuda = [
  { cmd = "poetry add numpy torch" },
  { cmd = "pip install torch --force-reinstall --extra-index-url https://download.pytorch.org/whl/cu117" },
]

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.0
    env_list = format, lint, py{38,39,310,311}

    [testenv]
    description = run unit tests
    deps =
        pytest
    commands =
        pytest tests

    [testenv:format]
    description = run formatters
    skip_install = true
    deps =
        black
        isort
        pyupgrade
        blacken-docs
    commands =
        black src
        isort src
#        pyupgrade src/**/*.py
#        blacken-docs src/**/*.py

    [testenv:nb_format]
    description = run formatters on notebooks
    skip_install = true
    deps =
        nbqa[toolchain]
    commands =
        nbqa black notebooks
        nbqa isort notebooks --float-to-top
        nbqa pyupgrade notebooks
        nbqa blacken-docs notebooks --nbqa-md
	    nbqa flake8 notebooks

    [testenv:lint]
    description = run linters
    skip_install = true
    deps =
        flake8
        flake8-docstrings
        flake8-pyproject
        flake8-simplify
        flake8-requirements
        flake8-use-fstring
        flake8-pytest-style
    commands =
        flake8 src tests
"""
